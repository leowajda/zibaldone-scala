# version
version = 3.8.0

# scala dialects
runner.dialect = scala3

# maximum line length
maxColumn = 120

# assumes standard usage of .stripMargin method
assumeStandardLibraryStripMargin = false

indent {
  # controls primary code indentation
  main = 2

  # controls significant optional braces indentation
  significant = ${indent.main}

  # controls indentation for call site arguments
  callSite = ${indent.main}

  # controls indentation within control expressions
  ctrlSite = ${indent.main}

  # controls indentation for definition site arguments
  defnSite = ${indent.main}

  # controls indentation within constructors
  ctorSite = ${indent.main}

  # custom indentation for case clauses in match expressions
  matchSite = ${indent.main}

  # applies indentation to patterns in case clauses
  caseSite = ${indent.main}

  # defines indentation for extends or derives clauses
  extendSite = ${indent.main}

  # defines additional indentation for with elements
  withSiteRelativeToExtends = ${indent.main}

  # defines additional indentation for post-comma elements
  commaSiteRelativeToExtends = ${indent.main}

  # applies to definitions and sets extra indentation for parameter groups
  extraBeforeOpenParenDefnSite = 0

  # determines relative indentation for broken infix and match expressions
  relativeToLhsLastLine = [match, infix]

  # controls extra indentation for method call arguments
  fewerBraces = "never"
}

binPack {
  # enables single-level indentation for outermost call regardless of nesting
  indentCallSiteOnce = false

  # disables indentation for same-line single-arg cases
  indentCallSiteSingleArg = false
}

align {
  # alignment presets for token alignment in code.
  preset = more

  # controls alignment of arrow enumerator generator
  arrowEnumeratorGenerator = true

  # controls alignment of closing parentheses
  closeParenSite = false

  # controls alignment of opening parentheses
  openParenCallSite = false

  # controls alignment after opening parentheses in control structures
  openParenCtrlSite = false

  # controls alignment after opening parentheses in definition sites
  openParenDefnSite = false

  # controls alignment of tuples to opening parenthesis
  openParenTupleSite = false

  # aligns multiline string literals with opening triple quotes
  stripMargin = true

  # controls alignment of multiline statements
  multiline = true

  # allows for overflow in alignment
  allowOverflow = true

  # controls indentation of interpolated code within interpolated strings
  inInterpolation = false

  # preserves spacing between successive non-whitespace tokens
  delayUntilSpace = false

  # align token with code and owners, each owner with optional regex and parent list.
  tokens."+" = [
    {
      code = "=>"
      owners = [{ regex = "Case" }]
    },
    {
      code = "%"
      owners = [{ regex = "Term.ApplyInfix" }]
    },
    {
      code = "%%"
      owners = [{ regex = "Term.ApplyInfix" }]
    },
    {
      code = ":"
      owners = [
        { regex = "Term\\.Param", parents = [ "Ctor\\.Primary" ] }
      ]
    }
  ]
}

newlines {
  # controls general approach to line breaks
  source = keep

  # controls blank line addition around top-level statements
  topLevelStatementBlankLines = [{ blanks = 1 }]

  # controls placement and threshold for blank lines around top-level statements
  topLevelBodyIfMinStatements = [before,after]
  topLevelBodyMinStatements = 2

  # forces blank line before template body's first statement
  beforeTemplateBodyIfBreakInParentCtors = false

  # controls newline before multiline case/if/def/val bodies
  beforeMultiline = ${newlines.source}

  # controls formatting of bounds in type parameters
  beforeTypeBounds = ${newlines.source}
  # forces newline before 'else' after curly braces in 'if' statements
  alwaysBeforeElseAfterCurlyIf = false

  # controls newline between opening curly brace and lambda or partial function parameters
  beforeCurlyLambdaParams = never

  # controls newline handling after arrow in curly brace lambda or partial function parameters
  afterCurlyLambdaParams = squash

  # controls newlines around implicit parameter list modifiers
  implicitParamListModifierPrefer = after

  # preserves line breaks around infix expressions
  afterInfix = ${newlines.source}

  # forces line breaks around nested parenthesized sub-expressions
  afterInfixBreakOnNested = false

  # allows occasional line overflows
  avoidForSimpleOverflow = [tooLong, punct, slc]

  # defines usage of newlines in definition result types
  avoidInResultType = true

  # allows newline before colon in method signatures
  sometimesBeforeColonInMethodReturnType = false

  # enables separate formatting for parameter groups
  beforeOpenParenDefnSite = null
  beforeOpenParenCallSite = null

  # controls formatting for sequences of .method invocations
  selectChains = ${newlines.source}

  # controls formatting of spliced code within string constants
  inInterpolation = "allow"

  # controls ignoring newlines in syntax for single-line formatting
  ignoreInSyntax = true
}

danglingParentheses {
  # controls dangling parentheses at definition sites
  defnSite = true

  # controls dangling parentheses at call sites
  callSite = true

  # forces dangling parentheses around control structures
  ctrlSite = false

  # controls dangling of closing parentheses in tuples
  tupleSite = false
}

rewrite {
  # replaces infix expressions with method calls
  rules."+" = [AvoidInfix]

  avoidInfix {
    # excludes rewriting infix expressions with placeholder arguments
    excludePlaceholderArg = true

    # controls exclusion of standard scalatest assert methods
    excludeScalaTest = true
  }

  # removes redundant braces
  rules."+" = [RedundantBraces]

  redundantBraces {
    # removes redundant braces in string interpolation
    stringInterpolation = true

    # rewrites redundant braces in general expressions
    generalExpressions = true

    # rewrites redundant braces in if-else expressions
    ifElseExpressions = true

    # rewrites redundant braces in definition bodies
    defnBodies = "all"

    # limits number of line breaks inside input bodies
    maxBreaks = 100
  }

  # applies rewriting rule for redundant parentheses
  rules."+" = [RedundantParens]

  # controls application of rule to infix expressions
  redundantParens.infixSide = null

  # applies rewriting rule for sorting modifiers
  rules."+" = [SortModifiers]

  sortModifiers {
    # utilizes order based on Scala Style Guide preset
    # preset = styleGuide
    # available from 3.8.1
  }

  rules."+" = [PreferCurlyFors]

  # replaces all semicolons with a newline
  preferCurlyFors.removeTrailingSemicolonsOnly = false

  rules."+" = [Imports]

  # handles import and export statements sorting logic
  imports.sort = scalastyle

  # handles trailing commas in dangling delimiters
  trailingCommas.style = "never"

  scala3 {
    # controls removal of optional braces in Scala 3
    removeOptionalBraces = oldSyntaxToo

    # applies Scala 3 syntax
    convertToNewSyntax = true
  }
}

# configures wrapping of comments exceeding maximum column length
comments.wrap = standalone

docstrings {
  # specifies the style for formatting docstrings
  style = Asterisk

  # removes empty docstrings
  removeEmpty = true

  # folds docstrings into one line
  oneline = unfold

  # formats Scaladoc comments, with limited support for HTML
  wrap = "yes"

  # forces the first line to be blank in multiline docstrings
  blankFirstLine = yes
  # inserts a blank line before docstrings
  forceBlankLineBefore = true
}

spaces {
  # always inserts a space before context bound colon
  beforeContextBoundColon = IfMultipleBounds

  # inserts spaces inside import curly braces
  inImportCurlyBraces = false

  # inserts spaces inside interpolated strings
  inInterpolatedStringCurlyBraces = false

  # inserts spaces inside parentheses
  inParentheses = false

  # inserts spaces after a keyword before parentheses
  afterKeywordBeforeParen = true

  # inserts spaces in by name types
  inByNameTypes = true

  # inserts spaces after symbolic methods
  afterSymbolicDefs = true

  # controls spacing before arguments enclosed in parentheses in function calls or infix expressions
  beforeApplyArgInParens = AfterSymbolic
  beforeInfixArgInParens = AfterSymbolic
}

literals {
  # configures literals formatting
  long = "Upper"
  float = "Upper"
  double = "Upper"
  hexDigits = "Upper"
  scientific = "Upper"
  hexPrefix = "Lower"
}

# formats embedded Scala relative to containing XML
xmlLiterals.assumeFormatted = true

# rewrites tokens from Unicode to ASCII
rewriteTokens = {
  "⇒": "=>"
  "→": "->"
  "←": "<-"
}

# controls formatting of import selectors
importSelectors = "noBinPack"

# formats Scala mdoc fences in Markdown files
project.includePaths."+" = ["glob:**.md"]